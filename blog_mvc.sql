-- phpMyAdmin SQL Dump
-- version 4.7.7
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Янв 27 2020 г., 01:12
-- Версия сервера: 5.6.38
-- Версия PHP: 5.5.38

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `blog_mvc`
--

-- --------------------------------------------------------

--
-- Структура таблицы `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `title` text NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `short_content` text NOT NULL,
  `content` text NOT NULL,
  `author_id` varchar(11) NOT NULL,
  `author_name` varchar(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `article`
--

INSERT INTO `article` (`id`, `title`, `date`, `short_content`, `content`, `author_id`, `author_name`) VALUES
(1, 'SELECT', '2020-01-26 21:16:21', 'Команда SELECT получает записи из базы данных по определенному условию, которое задается с помощью команды where.\r\nЭти записи можно отсортировать с помощью команды order by, а также можно ограничить их количество с помощью limit.', 'Команда SELECT получает записи из базы данных по определенному условию, которое задается с помощью команды where.\r\nЭти записи можно отсортировать с помощью команды order by, а также можно ограничить их количество с помощью limit.', '1', 'admin'),
(2, 'INSERT', '2020-01-26 21:17:06', 'Команда INSERT вставляет записи в базу данных. Можно вставить или одну запись, или сразу несколько.\r\nСм. также команды select, update, delete, которые отвечают за получение, редактирование и удаление записей.', 'Команда INSERT вставляет записи в базу данных. Можно вставить или одну запись, или сразу несколько.\r\nСм. также команды select, update, delete, которые отвечают за получение, редактирование и удаление записей.', '1', 'admin'),
(3, 'Переменные', '2020-01-26 21:18:52', 'Одним из самых главных и распространенных объектов в программировании является переменная.\r\nПеременная - это такой объект, который может хранить внутри себя различные данные, например, строки или числа.\r\nИмя переменной должно состоять из английских букв: больших или маленьких, а также цифр и знака_п', 'Одним из самых главных и распространенных объектов в программировании является переменная.\r\nПеременная - это такой объект, который может хранить внутри себя различные данные, например, строки или числа.\r\nИмя переменной должно состоять из английских букв: больших или маленьких, а также цифр и знака_подчеркивания.', '1', 'admin'),
(4, 'Операция присваивания', '2020-01-26 21:19:52', 'Очень важным элементом программирования является операция присваивания.\r\nС помощью присваивания мы можем положить в переменную результат какой-либо операции, например, строку или число, а затем достать эти данные в нужном нам месте и воспользоваться ими. Очень важным элементом программирования являе', 'Очень важным элементом программирования является операция присваивания.\r\nС помощью присваивания мы можем положить в переменную результат какой-либо операции, например, строку или число, а затем достать эти данные в нужном нам месте и воспользоваться ими. Очень важным элементом программирования является операция присваивания. С помощью присваивания мы можем положить в переменную результат какой-либо операции, например, строку или число, а затем достать эти данные в нужном нам месте и воспользоваться ими.', '1', 'admin'),
(5, 'Комментарии', '2020-01-26 21:20:50', 'К коде PHP, так же, как и в HTML и CSS, можно оставлять комментарии, которые будут проигнорированы PHP при выполнении программы.\r\nИх обычно используют для того, чтобы оставлять какие-либо пометки в коде или временно убрать какие-то строки кода, которые вам мешают, а потом иметь возможность быстро их', 'К коде PHP, так же, как и в HTML и CSS, можно оставлять комментарии, которые будут проигнорированы PHP при выполнении программы.\r\nИх обычно используют для того, чтобы оставлять какие-либо пометки в коде или временно убрать какие-то строки кода, которые вам мешают, а потом иметь возможность быстро их вернуть обратно. К коде PHP, так же, как и в HTML и CSS, можно оставлять комментарии, которые будут проигнорированы PHP при выполнении программы.\r\nИх обычно используют для того, чтобы оставлять какие-либо пометки в коде или временно убрать какие-то строки кода, которые вам мешают, а потом иметь возможность быстро их вернуть обратно. К коде PHP, так же, как и в HTML и CSS, можно оставлять комментарии, которые будут проигнорированы PHP при выполнении программы.\r\nИх обычно используют для того, чтобы оставлять какие-либо пометки в коде или временно убрать какие-то строки кода, которые вам мешают, а потом иметь возможность быстро их вернуть обратно.', '1', 'admin'),
(6, 'Функции', '2020-01-26 21:21:36', 'В программировании есть такое понятие, как функции. В отличии от переменных, которые хранят внутри себя некоторые данные, функции выполняют операции над этими данными.\r\nФункция отличается от переменной тем, что перед именем функции не ставится знак доллара (он нужен только для переменных), а также т', 'В программировании есть такое понятие, как функции. В отличии от переменных, которые хранят внутри себя некоторые данные, функции выполняют операции над этими данными.\r\nФункция отличается от переменной тем, что перед именем функции не ставится знак доллара (он нужен только для переменных), а также тем, что у нее после названия стоят круглые скобки ( ), внутри которых через запятую можно перечислять параметры.\r\nПараметры - это данные (например, строки или числа), которые мы даем функции, она производит над ними какие-то операции и возвращает нам результат.\r\nНапример, в PHP есть стандартная функция sqrt(), которая параметром принимает число, а возвращает квадратный корень этого числа.\r\nТо есть, если ей передать число 9, вот так - sqrt(9), то на выходе получим число 3. Полученное число мы можем записать в какую-либо переменную или вывести на экран.', '1', 'admin'),
(7, 'Функция echo', '2020-01-26 21:22:07', ' PHP существует специальная функция echo, которая позволяет вывести какой-либо текст в окно браузера. В отличие от других функций, после echo не требуются круглые скобки (). PHP существует специальная функция echo, которая позволяет вывести какой-либо текст в окно браузера. В отличие от других функц', ' PHP существует специальная функция echo, которая позволяет вывести какой-либо текст в окно браузера. В отличие от других функций, после echo не требуются круглые скобки (). PHP существует специальная функция echo, которая позволяет вывести какой-либо текст в окно браузера. В отличие от других функций, после echo не требуются круглые скобки (). PHP существует специальная функция echo, которая позволяет вывести какой-либо текст в окно браузера. В отличие от других функций, после echo не требуются круглые скобки (). PHP существует специальная функция echo, которая позволяет вывести какой-либо текст в окно браузера. В отличие от других функций, после echo не требуются круглые скобки ().', '1', 'admin'),
(8, 'Математические операции', '2020-01-26 21:23:18', 'В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак', 'В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).В PHP между числами и переменными можно совершать различные математические операции: сложение (знак +), вычитание (знак -), умножение (знак *), деление (знак /).', '2', 'man'),
(9, 'Значения true, false', '2020-01-26 21:25:10', 'Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет.Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или не', 'Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет.Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет.Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет.Значения true и false обозначают истину и ложь соответственно. Они используются для таких вещей, которые предполагают два варианта ответа - да или нет.', '2', 'man'),
(10, 'Функция var_dump', '2020-01-26 21:25:32', 'Бывают ситуации, когда нам нужно посмотреть содержимое переменной, чтобы понять, почему наш код работает не так, как мы хотели. Обычно на помощь приходит функция echo, однако, бывают ситуации, когда echo не работает.Бывают ситуации, когда нам нужно посмотреть содержимое переменной, чтобы понять, поч', 'Бывают ситуации, когда нам нужно посмотреть содержимое переменной, чтобы понять, почему наш код работает не так, как мы хотели. Обычно на помощь приходит функция echo, однако, бывают ситуации, когда echo не работает.Бывают ситуации, когда нам нужно посмотреть содержимое переменной, чтобы понять, почему наш код работает не так, как мы хотели. Обычно на помощь приходит функция echo, однако, бывают ситуации, когда echo не работает.Бывают ситуации, когда нам нужно посмотреть содержимое переменной, чтобы понять, почему наш код работает не так, как мы хотели. Обычно на помощь приходит функция echo, однако, бывают ситуации, когда echo не работает.', '2', 'man'),
(11, 'Операции инкремента и декремента', '2020-01-26 21:26:09', 'Операция $a++ или ++$a – увеличивает переменную $a на единицу. Эта операция называется инкремент.\r\nОперация $a-- или --$a – уменьшает переменную $a на единицу. Эта операция называется декремент.Операция $a++ или ++$a – увеличивает переменную $a на единицу. Эта операция называется инкремент.\r\nОпераци', 'Операция $a++ или ++$a – увеличивает переменную $a на единицу. Эта операция называется инкремент.\r\nОперация $a-- или --$a – уменьшает переменную $a на единицу. Эта операция называется декремент.Операция $a++ или ++$a – увеличивает переменную $a на единицу. Эта операция называется инкремент.\r\nОперация $a-- или --$a – уменьшает переменную $a на единицу. Эта операция называется декремент.', '2', 'man'),
(12, 'Функция COUNT', '2020-01-26 21:27:05', 'Функция COUNT подсчитывает количество записей в таблице.\r\nУсловие, по которому будут выбираться записи, задается с помощью команды where.\r\nКоманда where не является обязательной, если ее не указать - будут подсчитаны все записи в таблице.ункция COUNT подсчитывает количество записей в таблице.\r\nУслов', 'Функция COUNT подсчитывает количество записей в таблице.\r\nУсловие, по которому будут выбираться записи, задается с помощью команды where.\r\nКоманда where не является обязательной, если ее не указать - будут подсчитаны все записи в таблице.ункция COUNT подсчитывает количество записей в таблице.\r\nУсловие, по которому будут выбираться записи, задается с помощью команды where.\r\nКоманда where не является обязательной, если ее не указать - будут подсчитаны все записи в таблице.', '2', 'man'),
(15, 'Команда UNION', '2020-01-26 22:00:07', 'Команда UNION объединяет данные из нескольких таблиц в одну при выборке.\r\nПри объединении количество столбцов во всех таблицах должно совпадать, иначе будет ошибка\r\nИмена столбцов будут такие же, как в основной таблице, в которую добавляются данные из других таблиц.\r\nВнимание: если не используется к', 'Команда UNION объединяет данные из нескольких таблиц в одну при выборке.\r\nПри объединении количество столбцов во всех таблицах должно совпадать, иначе будет ошибка\r\nИмена столбцов будут такие же, как в основной таблице, в которую добавляются данные из других таблиц.\r\nВнимание: если не используется ключевое слово ALL для UNION, все возвращенные строки будут уникальными, так как по умолчанию подразумевается distinct, который удаляет неуникальные значения.', '3', 'mantwo');

-- --------------------------------------------------------

--
-- Структура таблицы `comments`
--

CREATE TABLE `comments` (
  `id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `article_id` int(11) NOT NULL,
  `comment` text CHARACTER SET utf8mb4 NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `author_name` varchar(16) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `comments`
--

INSERT INTO `comments` (`id`, `author_id`, `article_id`, `comment`, `date`, `author_name`) VALUES
(1, 2, 12, 'SELECT COUNT(*) FROM имя_таблицы WHERE условие', '2020-01-26 21:33:03', 'man'),
(2, 2, 12, 'SELECT COUNT(поле) FROM имя_таблицы WHERE условие', '2020-01-26 21:33:13', 'man'),
(3, 2, 12, 'SELECT COUNT(DISTINCT поле) FROM имя_таблицы WHERE условие', '2020-01-26 21:33:19', 'man'),
(4, 2, 12, 'SELECT COUNT(*) as count FROM workers WHERE age=23', '2020-01-26 21:57:33', 'man');

-- --------------------------------------------------------

--
-- Структура таблицы `routes`
--

CREATE TABLE `routes` (
  `post_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `routes`
--

INSERT INTO `routes` (`post_id`, `tag_id`) VALUES
(1, 1),
(2, 1),
(3, 3),
(3, 1),
(4, 3),
(4, 4),
(5, 3),
(5, 4),
(5, 5),
(5, 1),
(5, 6),
(6, 3),
(6, 4),
(7, 3),
(8, 3),
(8, 4),
(0, 3),
(0, 4),
(0, 3),
(0, 4),
(9, 3),
(9, 4),
(10, 3),
(11, 3),
(11, 4),
(12, 1),
(0, 3),
(0, 4),
(0, 5),
(0, 1),
(0, 6),
(0, 3),
(0, 4),
(0, 5),
(0, 1),
(0, 6),
(0, 3),
(0, 4),
(0, 5),
(0, 1),
(0, 6),
(0, 3),
(0, 4),
(0, 5),
(0, 1),
(0, 6),
(0, 3),
(0, 4),
(0, 5),
(0, 1),
(0, 6),
(15, 1);

-- --------------------------------------------------------

--
-- Структура таблицы `tags`
--

CREATE TABLE `tags` (
  `id` int(11) NOT NULL,
  `title` varchar(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `tags`
--

INSERT INTO `tags` (`id`, `title`) VALUES
(1, '#mysql'),
(2, '#mys'),
(3, '#PHP'),
(4, '#JavaScript'),
(5, '#CSS'),
(6, '#html'),
(7, '#asd');

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `full_name` varchar(32) NOT NULL DEFAULT '',
  `email` varchar(32) NOT NULL DEFAULT '',
  `username` varchar(20) NOT NULL DEFAULT '',
  `password` varchar(32) NOT NULL DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`id`, `full_name`, `email`, `username`, `password`) VALUES
(1, 'admin', 'admin@bk.ru', 'admin', '1234'),
(2, 'Тестовый пользователь', 'test@bk.ru', 'man', '1234'),
(3, 'Тестовый пользователь2', 'test2@bk.ru', 'mantwo', '1234');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;

--
-- AUTO_INCREMENT для таблицы `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT для таблицы `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
